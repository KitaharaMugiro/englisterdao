/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type VoteStruct = {
  voter: PromiseOrValue<string>;
  candidates: PromiseOrValue<string>[];
  points: PromiseOrValue<BigNumberish>[];
};

export type VoteStructOutput = [string, string[], BigNumber[]] & {
  voter: string;
  candidates: string[];
  points: BigNumber[];
};

export interface ContributionPollInterface extends utils.Interface {
  functions: {
    "CONTRIBUTOR_ASSIGNMENT_TOKEN()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "POLL_ADMIN_ROLE()": FunctionFragment;
    "REQUIRED_TOKEN_FOR_VOTE()": FunctionFragment;
    "SUPPORTER_ASSIGNMENT_TOKEN()": FunctionFragment;
    "VOTE_MAX_POINT()": FunctionFragment;
    "candidateToContributionPoll()": FunctionFragment;
    "candidates(int256,uint256)": FunctionFragment;
    "daoTokenAddress()": FunctionFragment;
    "getCurrentCandidates()": FunctionFragment;
    "getCurrentVoters()": FunctionFragment;
    "getCurrentVotes()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pollId()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setContributorAssignmentToken(uint256)": FunctionFragment;
    "setDaoTokenAddress(address)": FunctionFragment;
    "setPollAdminRole(address)": FunctionFragment;
    "setRequiredTokenForVote(uint256)": FunctionFragment;
    "setSupporterAssignmentToken(uint256)": FunctionFragment;
    "setVoteMaxPoint(uint256)": FunctionFragment;
    "setVotingEnabled(bool)": FunctionFragment;
    "settleCurrentPollAndCreateNewPoll()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "vote(address[],uint256[])": FunctionFragment;
    "votes(int256,uint256)": FunctionFragment;
    "votingEnabled()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CONTRIBUTOR_ASSIGNMENT_TOKEN"
      | "DEFAULT_ADMIN_ROLE"
      | "POLL_ADMIN_ROLE"
      | "REQUIRED_TOKEN_FOR_VOTE"
      | "SUPPORTER_ASSIGNMENT_TOKEN"
      | "VOTE_MAX_POINT"
      | "candidateToContributionPoll"
      | "candidates"
      | "daoTokenAddress"
      | "getCurrentCandidates"
      | "getCurrentVoters"
      | "getCurrentVotes"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "owner"
      | "pause"
      | "paused"
      | "pollId"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "setContributorAssignmentToken"
      | "setDaoTokenAddress"
      | "setPollAdminRole"
      | "setRequiredTokenForVote"
      | "setSupporterAssignmentToken"
      | "setVoteMaxPoint"
      | "setVotingEnabled"
      | "settleCurrentPollAndCreateNewPoll"
      | "supportsInterface"
      | "transferOwnership"
      | "unpause"
      | "vote"
      | "votes"
      | "votingEnabled"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CONTRIBUTOR_ASSIGNMENT_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POLL_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REQUIRED_TOKEN_FOR_VOTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUPPORTER_ASSIGNMENT_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_MAX_POINT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidateToContributionPoll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "daoTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVoters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pollId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContributorAssignmentToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDaoTokenAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPollAdminRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequiredTokenForVote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupporterAssignmentToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoteMaxPoint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleCurrentPollAndCreateNewPoll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "votingEnabled",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTRIBUTOR_ASSIGNMENT_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POLL_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REQUIRED_TOKEN_FOR_VOTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUPPORTER_ASSIGNMENT_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_MAX_POINT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateToContributionPoll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pollId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContributorAssignmentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDaoTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPollAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequiredTokenForVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupporterAssignmentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVoteMaxPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleCurrentPollAndCreateNewPoll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingEnabled",
    data: BytesLike
  ): Result;

  events: {
    "Candidated(int256,address)": EventFragment;
    "CreatePoll(int256)": EventFragment;
    "Deposited(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SettlePoll(int256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Voted(int256,address)": EventFragment;
    "VotingEnabled(int256,bool)": EventFragment;
    "WithdrawEth(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Candidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatePoll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlePoll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawEth"): EventFragment;
}

export interface CandidatedEventObject {
  pollId: BigNumber;
  candidate: string;
}
export type CandidatedEvent = TypedEvent<
  [BigNumber, string],
  CandidatedEventObject
>;

export type CandidatedEventFilter = TypedEventFilter<CandidatedEvent>;

export interface CreatePollEventObject {
  pollId: BigNumber;
}
export type CreatePollEvent = TypedEvent<[BigNumber], CreatePollEventObject>;

export type CreatePollEventFilter = TypedEventFilter<CreatePollEvent>;

export interface DepositedEventObject {
  sender: string;
  amount: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SettlePollEventObject {
  pollId: BigNumber;
}
export type SettlePollEvent = TypedEvent<[BigNumber], SettlePollEventObject>;

export type SettlePollEventFilter = TypedEventFilter<SettlePollEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface VotedEventObject {
  pollId: BigNumber;
  voter: string;
}
export type VotedEvent = TypedEvent<[BigNumber, string], VotedEventObject>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface VotingEnabledEventObject {
  pollId: BigNumber;
  enabled: boolean;
}
export type VotingEnabledEvent = TypedEvent<
  [BigNumber, boolean],
  VotingEnabledEventObject
>;

export type VotingEnabledEventFilter = TypedEventFilter<VotingEnabledEvent>;

export interface WithdrawEthEventObject {
  amount: BigNumber;
  payedAmount: BigNumber;
}
export type WithdrawEthEvent = TypedEvent<
  [BigNumber, BigNumber],
  WithdrawEthEventObject
>;

export type WithdrawEthEventFilter = TypedEventFilter<WithdrawEthEvent>;

export interface ContributionPoll extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ContributionPollInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTRIBUTOR_ASSIGNMENT_TOKEN(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    POLL_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    REQUIRED_TOKEN_FOR_VOTE(overrides?: CallOverrides): Promise<[BigNumber]>;

    SUPPORTER_ASSIGNMENT_TOKEN(overrides?: CallOverrides): Promise<[BigNumber]>;

    VOTE_MAX_POINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    candidateToContributionPoll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    daoTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getCurrentCandidates(overrides?: CallOverrides): Promise<[string[]]>;

    getCurrentVoters(overrides?: CallOverrides): Promise<[string[]]>;

    getCurrentVotes(overrides?: CallOverrides): Promise<[VoteStructOutput[]]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pollId(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContributorAssignmentToken(
      _contributorAssignmentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDaoTokenAddress(
      _daoTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPollAdminRole(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRequiredTokenForVote(
      _rankForVote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSupporterAssignmentToken(
      _supporterAssignmentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVoteMaxPoint(
      _voteMaxPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVotingEnabled(
      _votingEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleCurrentPollAndCreateNewPoll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vote(
      _candidates: PromiseOrValue<string>[],
      _points: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { voter: string }>;

    votingEnabled(overrides?: CallOverrides): Promise<[boolean]>;
  };

  CONTRIBUTOR_ASSIGNMENT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  POLL_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  REQUIRED_TOKEN_FOR_VOTE(overrides?: CallOverrides): Promise<BigNumber>;

  SUPPORTER_ASSIGNMENT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

  VOTE_MAX_POINT(overrides?: CallOverrides): Promise<BigNumber>;

  candidateToContributionPoll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  candidates(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  daoTokenAddress(overrides?: CallOverrides): Promise<string>;

  getCurrentCandidates(overrides?: CallOverrides): Promise<string[]>;

  getCurrentVoters(overrides?: CallOverrides): Promise<string[]>;

  getCurrentVotes(overrides?: CallOverrides): Promise<VoteStructOutput[]>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pollId(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContributorAssignmentToken(
    _contributorAssignmentToken: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDaoTokenAddress(
    _daoTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPollAdminRole(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRequiredTokenForVote(
    _rankForVote: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSupporterAssignmentToken(
    _supporterAssignmentToken: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVoteMaxPoint(
    _voteMaxPoint: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVotingEnabled(
    _votingEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleCurrentPollAndCreateNewPoll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vote(
    _candidates: PromiseOrValue<string>[],
    _points: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votes(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  votingEnabled(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    CONTRIBUTOR_ASSIGNMENT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    POLL_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    REQUIRED_TOKEN_FOR_VOTE(overrides?: CallOverrides): Promise<BigNumber>;

    SUPPORTER_ASSIGNMENT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_MAX_POINT(overrides?: CallOverrides): Promise<BigNumber>;

    candidateToContributionPoll(overrides?: CallOverrides): Promise<void>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    daoTokenAddress(overrides?: CallOverrides): Promise<string>;

    getCurrentCandidates(overrides?: CallOverrides): Promise<string[]>;

    getCurrentVoters(overrides?: CallOverrides): Promise<string[]>;

    getCurrentVotes(overrides?: CallOverrides): Promise<VoteStructOutput[]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pollId(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContributorAssignmentToken(
      _contributorAssignmentToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDaoTokenAddress(
      _daoTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPollAdminRole(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequiredTokenForVote(
      _rankForVote: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupporterAssignmentToken(
      _supporterAssignmentToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVoteMaxPoint(
      _voteMaxPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotingEnabled(
      _votingEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleCurrentPollAndCreateNewPoll(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vote(
      _candidates: PromiseOrValue<string>[],
      _points: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    votes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    votingEnabled(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Candidated(int256,address)"(
      pollId?: null,
      candidate?: PromiseOrValue<string> | null
    ): CandidatedEventFilter;
    Candidated(
      pollId?: null,
      candidate?: PromiseOrValue<string> | null
    ): CandidatedEventFilter;

    "CreatePoll(int256)"(pollId?: null): CreatePollEventFilter;
    CreatePoll(pollId?: null): CreatePollEventFilter;

    "Deposited(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositedEventFilter;
    Deposited(
      sender?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SettlePoll(int256)"(pollId?: null): SettlePollEventFilter;
    SettlePoll(pollId?: null): SettlePollEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Voted(int256,address)"(
      pollId?: null,
      voter?: PromiseOrValue<string> | null
    ): VotedEventFilter;
    Voted(
      pollId?: null,
      voter?: PromiseOrValue<string> | null
    ): VotedEventFilter;

    "VotingEnabled(int256,bool)"(
      pollId?: null,
      enabled?: null
    ): VotingEnabledEventFilter;
    VotingEnabled(pollId?: null, enabled?: null): VotingEnabledEventFilter;

    "WithdrawEth(uint256,uint256)"(
      amount?: null,
      payedAmount?: null
    ): WithdrawEthEventFilter;
    WithdrawEth(amount?: null, payedAmount?: null): WithdrawEthEventFilter;
  };

  estimateGas: {
    CONTRIBUTOR_ASSIGNMENT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    POLL_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    REQUIRED_TOKEN_FOR_VOTE(overrides?: CallOverrides): Promise<BigNumber>;

    SUPPORTER_ASSIGNMENT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_MAX_POINT(overrides?: CallOverrides): Promise<BigNumber>;

    candidateToContributionPoll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daoTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentCandidates(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentVoters(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentVotes(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pollId(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContributorAssignmentToken(
      _contributorAssignmentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDaoTokenAddress(
      _daoTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPollAdminRole(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRequiredTokenForVote(
      _rankForVote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSupporterAssignmentToken(
      _supporterAssignmentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVoteMaxPoint(
      _voteMaxPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVotingEnabled(
      _votingEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleCurrentPollAndCreateNewPoll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vote(
      _candidates: PromiseOrValue<string>[],
      _points: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingEnabled(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRIBUTOR_ASSIGNMENT_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POLL_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REQUIRED_TOKEN_FOR_VOTE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUPPORTER_ASSIGNMENT_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VOTE_MAX_POINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    candidateToContributionPoll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daoTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentCandidates(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentVoters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pollId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContributorAssignmentToken(
      _contributorAssignmentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDaoTokenAddress(
      _daoTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPollAdminRole(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRequiredTokenForVote(
      _rankForVote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSupporterAssignmentToken(
      _supporterAssignmentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVoteMaxPoint(
      _voteMaxPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVotingEnabled(
      _votingEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleCurrentPollAndCreateNewPoll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      _candidates: PromiseOrValue<string>[],
      _points: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
